@page "/publisher/{publisher:int}/publication"
@page "/publisher/{publisher:int}/publication/{publication:int}"
@inject IPublicationViewModel Model
@inject IJSRuntime JsRuntime

@if (!Model.IsInitialized)
{
    <p>Данные загружаются ...</p>
}
else
{
    <p>
        <b>[@Model.GetTitle()] Публикация</b>
        <NavLink class="btn btn-secondary btn-sm" href="@Model.GetPublicationsLink()" title="Издатель (владелец публикации)">
            @Model.Publisher.Code
        </NavLink>
    </p>

    <div class="input-group input-group-sm mb-1">
        <div class="input-group-prepend">
            <span class="input-group-text font-weight-bold">Наименование</span>
        </div>
        <input class="form-control" style="max-width: 300px" @bind="Model.Name" />
        <div class="input-group-append">
            <button class="btn btn-success btn-sm" @onclick="OnSaveChanges_Click">Сохранить</button>
            <NavLink class="btn btn-warning btn-sm" href="@Model.GetPublicationsLink()">Отмена</NavLink>
        </div>
    </div>

    <br />
    <br />
    <p>Типы сообщений</p>
}

@code
{
    [Parameter] public int Publisher { get; set; }
    [Parameter] public int Publication { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Model.InitializeViewModel(Publisher, Publication);
    }
    private async Task OnSaveChanges_Click()
    {
        await Model.SaveChanges();
        await JsRuntime.InvokeVoidAsync("alert", "OK");
    }
}