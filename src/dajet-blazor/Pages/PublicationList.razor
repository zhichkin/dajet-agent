@page "/publications/{publisher:int}"
@inject IPublicationListViewModel Model
@inject IJSRuntime JsRuntime

@if (!Model.IsInitialized)
{
    <p><em>Загрузка данных ...</em></p>
}
else
{
    <p><b>Издатель (узел обмена):</b> @Model.GetPublisherPresentation()</p>

    <NavLink class="btn btn-primary btn-sm" href="@Model.GetNewPublicationLink()">Создать</NavLink>
    <button class="btn btn-primary btn-sm" @onclick="Model.Refresh">Обновить</button>
    <b>Поиск:</b>
    <input @bind="Model.SearchText" @bind:event="oninput" />

    <br />
    <br />

    <p><b>Публикации (планы обмена)</b></p>

    <table class="table table-sm">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var publication in Model.Publications)
            {
                int id = publication.Id;
                int publisher = publication.Publisher;
                string publicationRoute = $"publisher/{publisher}/publication/{id}";
                <tr>
                    <td>@publication.Id.ToString()</td>
                    <td><NavLink class="btn-lg" href="@publicationRoute">@publication.Name</NavLink></td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="@(e => OnDeletePublication_Click(e, id))">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    [Parameter] public int Publisher { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await Model.InitializeViewModel(Publisher);
    }
    private async Task OnDeletePublication_Click(MouseEventArgs e, int id)
    {
        bool ok = await JsRuntime.InvokeAsync<bool>("confirm", $"Удалить публикацию #{id} ?");
        if (ok)
        {
            await Model.DeletePublication(id);
        }
    }
}