@page "/"
@page "/nodelist"
@inject INodeListViewModel Model
@inject IJSRuntime JsRuntime

<p><b>Узлы обмена</b></p>

@if (Model.Nodes == null)
{
    <p><em>Загружаю список узлов обмена ...</em></p>
}
else
{
    <NavLink class="btn btn-primary" href="node">Создать</NavLink>
    <button class="btn btn-primary" @onclick="Model.Refresh">Обновить</button>
    <b>Поиск:</b>
    <input @bind="Model.SearchText" @bind:event="oninput" />

    <br />
    <br />

    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Code</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var node in Model.Nodes)
            {
                int id = node.Id;
                string nodeRoute = $"node/{id}";
                <tr>
                    <td>@node.Id.ToString()</td>
                    <td><NavLink class="btn-lg" href="@nodeRoute">@node.Code</NavLink></td>
                    <td>@node.Description</td>
                    <td>
                        <button class="btn btn-danger" @onclick="@(e => OnDeleteNode_Click(e, id))">Удалить</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        await Model.InitializeViewModel();
    }
    private async Task OnDeleteNode_Click(MouseEventArgs e, int id)
    {
        bool ok = await JsRuntime.InvokeAsync<bool>("confirm", $"Удалить узел #{id} ?");
        if (ok)
        {
            await Model.DeleteNode(id);
        }
    }
}
@*string prompted = await JsRuntime.InvokeAsync<string>("prompt", "Input:");*@